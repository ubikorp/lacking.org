---
// -------------------
// Single Post Page ==
// -------------------

// Typescript
import type { InferGetStaticPropsType, GetStaticPaths } from 'astro';
// Configuration
import { TLO } from "~/utils/config";

import merge from 'lodash.merge';
import type { ImageMetadata } from 'astro';
import ToBlogLink from '~/components/blog/ToBlogLink.astro';

import { getCanonical, getPermalink } from '~/utils/permalinks';
import { getStaticPathsBlogPost, blogPostRobots } from '~/utils/blog';
import { findImage } from '~/utils/images';
import type { MetaData } from '~/types';

// TLO Components
import Layout from '~/layouts/Post.astro';
import FeatureImage from '~/tlo/widgets/FeatureImage.astro';
import Player from '~/tlo/widgets/Player.astro';
import Playlist from '~/tlo/widgets/Playlist.astro';
import PostTags from '~/tlo/ui/Tags.astro';
import SocialShare from '~/tlo/widgets/SocialShare.astro';
import YoutubeVideo from '~/tlo/widgets/YoutubeVideo.astro';

export const prerender = true;

export const getStaticPaths = (async () => {
  return await getStaticPathsBlogPost();
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { post } = Astro.props as Props;
const { Content } = post;

const url = getCanonical(getPermalink(post.permalink, 'post'));
// const image = (await findImage(post.image)) as ImageMetadata | string | undefined;

const metadata = merge(
  {
    title: post.title,
    description: post.excerpt,
    robots: {
      index: blogPostRobots?.index,
      follow: blogPostRobots?.follow,
    },
    openGraph: {
      type: 'article',
      // ...(image ? { images: [{ url: image, width: (image as ImageMetadata)?.width, height: (image as ImageMetadata)?.height }] } : {}),
    },
  },
  { ...(post?.metadata ? { ...post.metadata, canonical: post.metadata?.canonical || url } : {}) }
) as MetaData;

const category = TLO?.categories[post.category || 'home']
---

<Layout metadata={metadata} post={post}>

  <!-- Feature Image -->
  <FeatureImage post={post} link={false} />

  <!-- Post Content -->
  {Content ? <Content /> : <Fragment set:html={post.content || ''} />}

  <!-- Media -->
  {post.media && <Player media={post.media} />}

  <!-- Playlist -->
  {post.playlist && <Playlist playlist={post.playlist} />}

  <!-- YouTube -->
  {post.youtube && <YoutubeVideo videoId={post.youtube} />}

  <!-- Tags -->
  <PostTags tags={post.tags} />

  <!-- Social Share -->
  <SocialShare url={url} text={post.title} />
  
</Layout>
